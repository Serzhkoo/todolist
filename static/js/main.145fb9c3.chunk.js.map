{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableTitle.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","TodoList.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","label","helperText","variant","value","onChange","e","currentTarget","onKeyPress","key","IconButton","onClick","color","Add","EditableTitle","editMode","setEditMode","deActivateEditMode","onBlur","autoFocus","onDoubleClick","todoListId1","v1","todoListId2","initialState","id","filter","isDone","TodoList","dispatch","useDispatch","tasksForTodoList","useSelector","state","tasksObj","t","changeTodoListTitle","removeTodoList","Delete","taskTitle","todoListId","type","map","Checkbox","taskId","checked","Button","changeFilter","AppWithRedux","todoLists","removeTodoListAC","todoListTitle","changeTodoListTitleAC","todoListFilter","changeTodoListFilterAC","className","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","item","Paper","elevation","rootReducer","combineReducers","action","st","stateCopy","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.145fb9c3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        )\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import {IconButton, TextField} from \"@material-ui/core\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Add} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(\"\");\r\n        e.key === 'Enter' && addItem();\r\n    }\r\n\r\n    const addItem = () => {\r\n        if (title.trim() === \"\") {\r\n            setError('Title is required!')\r\n        } else {\r\n            props.addItem(title.trim());\r\n            setTitle(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField error={!!error}\r\n                       label=\"Type value\"\r\n                       helperText={error}\r\n                       variant=\"outlined\"\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}/>\r\n            <IconButton onClick={addItem} color={\"primary\"}>\r\n                <Add/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableTitlePropsType = {\r\n    title: string\r\n    onChange: (title: string) => void\r\n}\r\n\r\nexport function EditableTitle(props: EditableTitlePropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState('');\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError('');\r\n        e.key === 'Enter' && deActivateEditMode();\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        if (title.trim() === \"\") {\r\n            setError('Title is required!');\r\n        } else {\r\n            setEditMode(false)\r\n            props.onChange(title.trim())\r\n        }\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField error={!!error}\r\n                         helperText={error}\r\n                         variant={\"outlined\"}\r\n                         value={title}\r\n                         onChange={onChangeTitleHandler}\r\n                         onBlur={deActivateEditMode}\r\n                         onKeyPress={onKeyPressHandler}\r\n                         autoFocus/>\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n}","import {v1} from \"uuid\";\r\n\r\ntype ActionsType =\r\n    RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | ChangeTodoListFilterActionType;\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todoListId: string\r\n}\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todoListId1 = v1();\r\nexport const todoListId2 = v1();\r\n\r\nconst initialState: TodoListType[] = [\r\n    {id: todoListId1, title: \"What to learn\", filter: \"all\"},\r\n    {id: todoListId2, title: \"What to buy\", filter: \"all\"}\r\n]\r\n\r\nexport const todoListsReducer = (state: TodoListType[] = initialState, action: ActionsType): TodoListType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(st => action.todoListId !== st.id);\r\n        case 'ADD-TODOLIST':\r\n            return [{id: action.todoListId, title: action.title, filter: 'all'}, ...state];\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(st => {\r\n                if (st.id === action.id) {\r\n                    return {...st, title: action.title};\r\n                } else return {...st}\r\n            });\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(st => {\r\n                if (st.id === action.id) {\r\n                    return {...st, filter: action.filter};\r\n                } else return {...st}\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const removeTodoListAC = (todoListId: string): RemoveTodoListActionType => {\r\n    return { type: 'REMOVE-TODOLIST', todoListId: todoListId} as const\r\n}\r\n\r\nexport const addTodoListAC = (todoListTitle: string): AddTodoListActionType => {\r\n    return { type: 'ADD-TODOLIST', title: todoListTitle, todoListId: v1()} as const\r\n}\r\n\r\nexport const changeTodoListTitleAC = (todoListId: string, todoListTitle: string): ChangeTodoListTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: todoListId, title: todoListTitle } as const\r\n}\r\n\r\nexport const changeTodoListFilterAC = (todoListId: string, todoListFilter: FilterValuesType): ChangeTodoListFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: todoListId, filter: todoListFilter} as const\r\n}","import {v1} from \"uuid\";\r\nimport {AddTodoListActionType, RemoveTodoListActionType, todoListId1, todoListId2} from \"./todolists-reducer\";\r\n\r\ntype ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType;\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todoListId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    taskTitle: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    todoListId: string\r\n    taskTitle: string\r\n}\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nconst initialState: TasksStateType = {\r\n    [todoListId1]: [\r\n        {id: v1(), title: \"HTML and CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"React\", isDone: false},\r\n        {id: v1(), title: \"Redux\", isDone: false}\r\n    ],\r\n    [todoListId2]: [\r\n        {id: v1(), title: \"Villa\", isDone: false},\r\n        {id: v1(), title: \"BMW\", isDone: false},\r\n        {id: v1(), title: \"Audi\", isDone: false},\r\n        {id: v1(), title: \"Milk\", isDone: true}\r\n    ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            };\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: [{id: v1(), title: action.taskTitle, isDone: false}, ...state[action.todoListId],]\r\n            };\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {...t, isDone: !t.isDone} : t)\r\n            };\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {...t, title: action.taskTitle} : t)\r\n            };\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todoListId]: []};\r\n        case 'REMOVE-TODOLIST':\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.todoListId];\r\n            return stateCopy;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todoListId: todoListId} as const\r\n}\r\n\r\nexport const addTaskAC = (taskTitle: string, todoListId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', taskTitle: taskTitle, todoListId: todoListId} as const\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, todoListId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId: taskId, todoListId: todoListId} as const\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, todoListId: string, taskTitle: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId: taskId, todoListId: todoListId, taskTitle: taskTitle} as const\r\n}","import React from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableTitle} from \"./EditableTitle\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {\r\n    addTaskAC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC,\r\n    removeTaskAC,\r\n    TasksType\r\n} from \"./state/tasks-reducer\";\r\nimport {FilterValuesType} from \"./state/todolists-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    changeFilter: (todoListId: string, value: FilterValuesType) => void\r\n    filter: FilterValuesType\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, title: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n    const dispatch = useDispatch();\r\n    const tasks = useSelector<AppRootStateType, TasksType[]>(state => state.tasksObj[props.id]);\r\n\r\n    const onAllClickHandler = () => props.changeFilter(props.id,\"all\");\r\n    const onActiveClickHandler = () => props.changeFilter(props.id,\"active\");\r\n    const onAllCompletedHandler = () => props.changeFilter(props.id,\"completed\");\r\n    const removeTodoList = () => props.removeTodoList(props.id);\r\n\r\n    const addTask = (title: string) => {\r\n        dispatch(addTaskAC(title, props.id));\r\n    }\r\n\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(props.id, title)\r\n    }\r\n\r\n    let tasksForTodoList = tasks;\r\n\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodoList = tasksForTodoList.filter(t => t.isDone === true);\r\n    }\r\n    if (props.filter === \"active\") {\r\n        tasksForTodoList = tasksForTodoList.filter(t => t.isDone === false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableTitle title={props.title}\r\n                               onChange={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}><Delete/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ol>\r\n                {\r\n                    tasksForTodoList.map(t => {\r\n\r\n                        const onRemoveHandler = () => dispatch(removeTaskAC(t.id, props.id));\r\n                        const onChangeStatusHandler = () => dispatch(changeTaskStatusAC(t.id, props.id));\r\n                        const onChangeTitleHandler = (title: string) => dispatch(changeTaskTitleAC(t.id, props.id, title));\r\n\r\n                        return (\r\n                            <li key={t.id}>\r\n                                <Checkbox onChange={onChangeStatusHandler}\r\n                                          checked={t.isDone}\r\n                                          color={\"primary\"}/>\r\n                                <EditableTitle title={t.title}\r\n                                               onChange={onChangeTitleHandler}/>\r\n                                <IconButton onClick={onRemoveHandler}><Delete/></IconButton>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ol>\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ? \"contained\" : \"text\"} onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button variant={props.filter === \"active\" ? \"contained\" : \"text\"}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\r\n                        onClick={onAllCompletedHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    FilterValuesType,\r\n    removeTodoListAC, TodoListType\r\n} from \"./state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nfunction AppWithRedux() {\r\n    const dispatch = useDispatch();\r\n    const todoLists = useSelector<AppRootStateType, TodoListType[]>(state => state.todoLists);\r\n\r\n    function removeTodoList(todoListId: string) {\r\n        dispatch(removeTodoListAC(todoListId));\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        dispatch(addTodoListAC(title));\r\n    }\r\n\r\n    function changeTodoListTitle(todoListId: string, title: string) {\r\n        dispatch(changeTodoListTitleAC(todoListId, title));\r\n    }\r\n\r\n    function changeFilter(todoListId: string, value: FilterValuesType) {\r\n        dispatch(changeTodoListFilterAC(todoListId, value));\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"10px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n                                return <Grid item>\r\n                                    <Paper style={{padding: \"10px\"}} elevation={3}>\r\n                                        <TodoList key={tl.id}\r\n                                                  id={tl.id}\r\n                                                  title={tl.title}\r\n                                                  changeFilter={changeFilter}\r\n                                                  filter={tl.filter}\r\n                                                  removeTodoList={removeTodoList}\r\n                                                  changeTodoListTitle={changeTodoListTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            }\r\n                        )}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todoListsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasksObj: tasksReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}